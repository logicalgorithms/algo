char * stb(char * t, char * u)
{
	int length = strlen(u);
	char * btmask = new char[strlen(universal) + 1]{'0'};

	for (int i = 0; i < length; i++)
	{
		bitmask[i] = '0';
		for (int j = 0; j < strlen(t); j++)
		{
			if (t[j] == u[i])
			{
				bitmask[i] = '1';
				break;
			}
		}
	}
	bitmask[length] = '\0';
	return btmask;
}

char * bitMaskToSet(char*mask, char* u)
{

	int length = 1;
	for (int i = 0; mask[i]; i++)
	{
		if (mask[i] == '1')
		{
			length++;
		}
	}
	char * set = new char[length];
	for (int i = 0, j = 0; mask[i]; i++)
	{
		if (mask[i] == '1')
		{
			set[j] = u[i];
			j++;
		}
	}
	set[length - 1] = '\0';
	return set;
}

void basicComb(int * set, int size, int k, int curr, int cnt1, int cnt0){
	
	if(curr==sz) printArray(set, size);
	else{
		if(cnt1 < k){
			set[curr] = 1;
			basicComb(set, size, k, curr+1, cnt1+1, cnt0);
		}
		if(cnt0 < sz-k){
			set[curr] = 0;
			basicComb(set, size, k, curr+1, cnt1, cnt0+1);
		}
	}
}

// bigger than k 

set[current] = '1';
comb(set, size, k, onesCounter + 1, zerosCounter, current + 1);
if (size - zerosCounter > k + 1)
{
	set[current] = '0';
	comb(set, size, k, onesCounter , zerosCounter + 1, current + 1);
			
}


